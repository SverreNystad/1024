/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import org.junit.jupiter.api.Assertions.assertNotNull
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertNotEquals
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

class AppTest {
    
    private lateinit var game: Game

    @BeforeEach
    fun setUp() {
        game = Game()
    }

    @Test
    fun getGameBoard(){
        val game = Game()
        val board = game.getBoard()
        assertNotNull(board)

        for (row in board) {
            assertNotNull(row)
        }
    }

    @Test
    fun gameHasScore() {
        val game = Game()
        assertEquals(game.getScore(), 0)
    }
    
    @Test
    fun testMoveUp() {
        val initialBoard = listOf(
            mutableListOf(2, 0, 0, 2),
            mutableListOf(2, 0, 2, 0),
            mutableListOf(0, 2, 0, 2),
            mutableListOf(2, 2, 2, 2)
        )
        game = Game(initialBoard, 0)
        game.move(Direction.UP)
        
        val expectedBoard = listOf(
            mutableListOf(4, 4, 4, 4),
            mutableListOf(2, 0, 0, 2),
            mutableListOf(0, 0, 0, 0),
            mutableListOf(0, 0, 0, 0)
        )
        
        assertEquals(expectedBoard, game.getBoard())
    }

    @Test
    fun testMoveDown() {
        val initialBoard = listOf(
            mutableListOf(2, 2, 0, 2),
            mutableListOf(2, 2, 2, 0),
            mutableListOf(0, 2, 0, 2),
            mutableListOf(2, 2, 2, 2)
        )
        game = Game(initialBoard, 0)
        game.move(Direction.DOWN)
        
        val expectedBoard = listOf(
            mutableListOf(0, 0, 0, 0),
            mutableListOf(0, 0, 0, 0),
            mutableListOf(2, 4, 0, 2),
            mutableListOf(4, 4, 4, 4)
        )
        
        assertEquals(expectedBoard, game.getBoard())
    }

    @Test
    fun testMoveLeft() {
        val initialBoard = listOf(
            mutableListOf(2, 0, 0, 2),
            mutableListOf(2, 0, 2, 0),
            mutableListOf(0, 0, 0, 2),
            mutableListOf(2, 2, 2, 2)
        )
        game = Game(initialBoard, 0)
        game.move(Direction.LEFT)
        
        val expectedBoard = listOf(
            mutableListOf(4, 0, 0, 0),
            mutableListOf(4, 0, 0, 0),
            mutableListOf(2, 0, 0, 0),
            mutableListOf(4, 4, 0, 0)
        )
        
        assertEquals(expectedBoard, game.getBoard())
    }

    @Test
    fun testMoveRight() {
        val initialBoard = listOf(
            mutableListOf(2, 0, 0, 2),
            mutableListOf(2, 0, 2, 0),
            mutableListOf(0, 0, 0, 2),
            mutableListOf(2, 2, 2, 2)
        )
        game = Game(initialBoard, 0)
        game.move(Direction.RIGHT)
        
        val expectedBoard = listOf(
            mutableListOf(0, 0, 0, 4),
            mutableListOf(0, 0, 0, 4),
            mutableListOf(0, 0, 0, 2),
            mutableListOf(0, 0, 4, 4)
        )
        
        assertEquals(expectedBoard, game.getBoard())
    }

    @Test
    fun testScoreUpdate() {
        val initialBoard = listOf(
            mutableListOf(2, 2, 0, 0),
            mutableListOf(2, 2, 0, 0),
            mutableListOf(0, 0, 0, 0),
            mutableListOf(0, 0, 0, 0)
        )
        game = Game(initialBoard, 2)
        game.move(Direction.UP)
        
        assertEquals(8, game.getScore())
    }

    @Test
    fun testMovePopulatesBoard() {
        val initialBoard = listOf(
            mutableListOf(2, 2, 0, 0),
            mutableListOf(0, 0, 0, 0),
            mutableListOf(0, 0, 0, 0),
            mutableListOf(0, 0, 0, 0)
        )
        game = Game(initialBoard, 2)
        game.move(Direction.UP)
        val expectedAmountOfNonEmptySlots = 4

        val board = game.getBoard()
        val nonEmptySlots = mutableListOf<Int>()
        for (row in 0 until ROWS) {
            for (col in 0 until COLS) {
                if (board[row][col] != EMPTY) {
                    nonEmptySlots.add(board[row][col])
                }
            }
        }

        assertEquals(nonEmptySlots.size, expectedAmountOfNonEmptySlots)
    }
}
