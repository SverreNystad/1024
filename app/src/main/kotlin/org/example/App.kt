/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlin.random.Random

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    val app = App()
    println(app.greeting)

    val game = Game()
    val inputMap = mapOf(
        "up" to Direction.UP,
        "down" to Direction.DOWN,
        "left" to Direction.LEFT,
        "right" to Direction.RIGHT
    )

    while (true) {
        println("Enter direction (up, down, left, right) or 'exit' to quit:")
        val input = readLine()?.trim()?.lowercase()

        if (input == "exit") {
            break
        }

        val direction = inputMap[input]
        if (direction != null) {
            game.move(direction)
        } else {
            println("Invalid input. Please enter 'up', 'down', 'left', 'right', or 'exit'.")
        }
    }
}

const val COLS: Int = 4
const val ROWS: Int = 4
const val EMPTY: Int = 0

enum class Direction {
    UP, DOWN, RIGHT, LEFT
}

class Game {
    private var score: Int 
    private var board: List<MutableList<Int>>
    private var generationSize: Int

    constructor() {
        this.score = 0
        this.board = List(ROWS) { MutableList(COLS) { 0 } }
        this.generationSize = 2
    }
    
    constructor(board: List<MutableList<Int>>, generationSize: Int) {
        this.score = 0
        this.board = board
        this.generationSize = generationSize
    }

    public fun move(action: Direction) {
        doAction(action)
        populateBoard()
    }

    private fun doAction(action: Direction) {
        when (action) {
            Direction.UP -> {
                for (col in 0 until COLS) {
                    val nonZeroValues = mutableListOf<Int>()
                    var zeroCount = 0

                    // Collect non-zero values and count zeros
                    for (row in 0 until ROWS) {
                        val value = board[row][col]
                        if (value != 0) {
                            nonZeroValues.add(value)
                        } else {
                            zeroCount++
                        }
                    }

                    // Check for all equal slots from top down and merge them
                    var i = 0
                    while (i < nonZeroValues.size - 1) {
                        if (nonZeroValues[i] == nonZeroValues[i + 1]) {
                            nonZeroValues[i] *= 2
                            nonZeroValues.removeAt(i + 1)
                            zeroCount++
                            score += nonZeroValues[i]
                        }
                        i++
                    }

                    // Fill the column with non-zero values followed by zeros
                    for (row in 0 until nonZeroValues.size) {
                        board[row][col] = nonZeroValues[row]
                    }
                    for (row in nonZeroValues.size until ROWS) {
                        board[row][col] = 0
                    }
                }
            }
            Direction.DOWN -> {
                for (col in 0 until COLS) {
                    val nonZeroValues = mutableListOf<Int>()
                    var zeroCount = 0

                    // Collect non-zero values and count zeros
                    for (row in 0 until ROWS) {
                        val value = board[row][col]
                        if (value != 0) {
                            nonZeroValues.add(value)
                        } else {
                            zeroCount++
                        }
                    }

                    // Check for all equal slots from top down and merge them
                    var i = 0
                    while (i < nonZeroValues.size - 1) {
                        if (nonZeroValues[i] == nonZeroValues[i + 1]) {
                            nonZeroValues[i] *= 2
                            nonZeroValues.removeAt(i + 1)
                            zeroCount++
                            score += nonZeroValues[i]
                        }
                        i++
                    }

                    // Fill the column with non-zero values followed by zeros
                    for (row in 0 until nonZeroValues.size) {
                        board[(ROWS - 1) - row][col] = nonZeroValues[row]
                    }
                    for (row in nonZeroValues.size until ROWS) {
                        board[(ROWS - 1) - row][col] = 0
                    }
                }
            }
            Direction.LEFT -> {
                for (row in 0 until ROWS) {
                    val nonZeroValues = mutableListOf<Int>()
                    var zeroCount = 0

                    // Collect non-zero values and count zeros
                    for (col in 0 until COLS) {
                        val value = board[row][col]
                        if (value != 0) {
                            nonZeroValues.add(value)
                        } else {
                            zeroCount++
                        }
                    }

                    // Check for all equal slots from left to right and merge them
                    var i = 0
                    while (i < nonZeroValues.size - 1) {
                        if (nonZeroValues[i] == nonZeroValues[i + 1]) {
                            nonZeroValues[i] *= 2
                            nonZeroValues.removeAt(i + 1)
                            zeroCount++
                            score += nonZeroValues[i] 
                        }
                        i++
                    }

                    // Fill the row with non-zero values followed by zeros
                    for (col in 0 until nonZeroValues.size) {
                        board[row][col] = nonZeroValues[col]
                    }
                    for (col in nonZeroValues.size until COLS) {
                        board[row][col] = 0
                    }
                }
            }
            Direction.RIGHT -> {
                for (row in 0 until ROWS) {
                    val nonZeroValues = mutableListOf<Int>()
                    var zeroCount = 0

                    // Collect non-zero values and count zeros
                    for (col in 0 until COLS) {
                        val value = board[row][col]
                        if (value != 0) {
                            nonZeroValues.add(value)
                        } else {
                            zeroCount++
                        }
                    }

                     // Check for all equal slots from left right and merge them
                    var i = 0
                    while (i < nonZeroValues.size - 1) {
                        if (nonZeroValues[i] == nonZeroValues[i + 1]) {
                            nonZeroValues[i] *= 2
                            nonZeroValues.removeAt(i + 1)
                            zeroCount++
                            score += nonZeroValues[i]
                        }
                        i++
                    }

                    // Fill the row with zeros followed by non-zero values
                    for (col in 0 until nonZeroValues.size) {
                        board[row][COLS - 1 - col] = nonZeroValues[col]
                    }
                    for (col in nonZeroValues.size until COLS) {
                        board[row][COLS - 1  - col] = 0
                    }
                }
            }
        }
    }

    private fun populateBoard() {
        val emptySlots = mutableListOf<Pair<Int, Int>>()

        // Find all empty slots
        for (row in 0 until ROWS) {
            for (col in 0 until COLS) {
                if (board[row][col] == 0) {
                    emptySlots.add(Pair(row, col))
                }
            }
        }

        // Randomly choose slots to fill with a value
        repeat(generationSize) {
            if (emptySlots.isNotEmpty()) {
                val randomIndex = Random.nextInt(emptySlots.size)
                val (row, col) = emptySlots.removeAt(randomIndex)
                board[row][col] = chooseSlotValue()
            }
        }
    }
    
    private fun chooseSlotValue(): Int {
        var noise = Random.nextDouble()
        if (noise < 0.7) return 1 
        if (noise < 0.8) return 2
        if (noise < 0.9) return 4

        return 8

    }

    public fun getBoard(): List<MutableList<Int>> {
        return board
    }

    public fun getScore(): Int {
        return score
    }

    public fun display(): String {
        val stringBuilder = StringBuilder()

        for(row in 0 until ROWS) {
            for (col in 0 until COLS) {
                stringBuilder.append(board[row][col])
            }
            stringBuilder.append("\n")
        }
        return stringBuilder.toString()
    }
}