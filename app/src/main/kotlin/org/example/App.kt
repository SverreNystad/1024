/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlin.random.Random

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    val app = App()
    println(app.greeting)
}

const val COLS: Int = 4
const val ROWS: Int = 4
const val EMPTY: Int = 0

enum class Direction {
    UP, DOWN, RIGHT, LEFT
}

class Game {
    private var score: Int 
    private var board: List<MutableList<Int>>
    private var generationSize: Int

    constructor() {
        this.score = 0
        this.board = List(ROWS) { MutableList(COLS) { 0 } }
        this.generationSize = 2
    }
    

    public fun move(action: Direction) {
        doAction(action)
        populateBoard()
    }

    private fun doAction(action: Direction) {
        when (action) {
            Direction.UP -> {
                for (col in 0 until COLS) {
                    val nonZeroValues = mutableListOf<Int>()
                    var zeroCount = 0

                    // Collect non-zero values and count zeros
                    for (row in 0 until ROWS) {
                        val value = board[row][col]
                        if (value != 0) {
                            nonZeroValues.add(value)
                        } else {
                            zeroCount++
                        }
                    }

                    // Fill the column with non-zero values followed by zeros
                    for (row in 0 until nonZeroValues.size) {
                        board[row][col] = nonZeroValues[row]
                    }
                    for (row in nonZeroValues.size until ROWS) {
                        board[row][col] = 0
                    }
                }
            }
            Direction.DOWN -> {}
            Direction.LEFT -> {}
            Direction.RIGHT -> {}
        }
    }

    private fun populateBoard() {
        val emptySlots = mutableListOf<Pair<Int, Int>>()

        // Find all empty slots
        for (row in 0 until ROWS) {
            for (col in 0 until COLS) {
                if (board[row][col] == 0) {
                    emptySlots.add(Pair(row, col))
                }
            }
        }

        // Randomly choose slots to fill with a value
        repeat(generationSize) {
            if (emptySlots.isNotEmpty()) {
                val randomIndex = Random.nextInt(emptySlots.size)
                val (row, col) = emptySlots.removeAt(randomIndex)
                board[row][col] = chooseSlotValue()
            }
        }
    }
    
    private fun chooseSlotValue(): Int {
        var noise = Random.nextDouble()
        if (noise < 0.7) return 1 
        if (noise < 0.8) return 2
        if (noise < 0.9) return 4

        return 8

    }

    public fun getBoard(): List<MutableList<Int>> {
        return board
    }

    public fun getScore(): Int {
        return score
    }
}